import hubitat.helper.InterfaceUtils

metadata {
    definition (name: "Insteon WS Parent", namespace: "cw", author: "Chris Wilson") {
        capability "Initialize"
        capability "Refresh"
		capability "Switch"
		command "getDevices"
		command "createChild", ["string", "string"]
		command "listChild"      
        
    }
}

preferences {
    input("ip", "text", title: "IP Address", description: "IP Address", required: true)
	input("port", "text", title: "Port", description: "Port", required: true)
	//input("type", "text", title: "type", description: "type of device to install", required: false)
	//input("insteonId", "text", title: "Insteon ID", description: "Insteon device ID", required: false)	  
    input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
}


def parse(String description) {
	log.debug "data from websocketparsed here"
	log.debug description
    
}

def on(){
	
	child = getChildDevice(insteonId)
	child.parse("on")
	 
}

def off(){
	
	child = getChildDevice(insteonId)
	child.parse("off")
	
}


def initialize() {
   
    log.info "initialize() called"
    
    if (!ip) {
        log.warn "Please enter an IP"
        return
    }
    
	try {
		
       // InterfaceUtils.webSocketConnect(device, "ws://username:password@${ip}:80")
		InterfaceUtils.webSocketConnect(device, "ws://${ip}:${port}")
    } 
    catch(e) {
        if (logEnable) log.debug "initialize error: ${e.message}"
        log.error "WebSocket connect failed"
    }
}

def getDevices() {
	log.debug "getDevices sent"
	sendMsg ("getDevives")
}

def createChild (id, type ) {
	namespace = "cw"
	if (type == "motion") {type = "Virtual motion with Switch"}
	if (type == "contact") {type = "Insteon Contact Child"}
	

	
	 addChildDevice (namespace, type, id, [label: type + "|" + id, isComponent: false, name: type])
}

def listChild (){
	childDevices.each{ it ->
            log.debug "child: ${it.deviceNetworkId}"
           
           
        }
}

def sendMsg(String s) {
    InterfaceUtils.sendWebSocketMessage(device, s)
}



def webSocketStatus(String status){
    log.debug "webSocketStatus- ${status}"

    if(status.startsWith('failure: ')) {
        log.warn("failure message from web socket ${status}")
        reconnectWebSocket()
    } 
    else if(status == 'status: open') {
        log.info "websocket is open"
        // success! reset reconnect delay
        pauseExecution(1000)
        state.reconnectDelay = 1
    } 
    else if (status == "status: closing"){
        log.warn "WebSocket connection closing."
    } 
    else {
        log.warn "WebSocket error, reconnecting."
        reconnectWebSocket()
    }
}

def reconnectWebSocket() {
    // first delay is 2 seconds, doubles every time
    state.reconnectDelay = (state.reconnectDelay ?: 1) * 2
    // don't let delay get too crazy, max it out at 10 minutes
    if(state.reconnectDelay > 600) state.reconnectDelay = 600

   
    runIn(state.reconnectDelay, initialize)
}
