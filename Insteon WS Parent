import hubitat.helper.InterfaceUtils
import groovy.json.JsonSlurper

metadata {
    definition (name: "Insteon WS Parent", namespace: "cw", author: "Chris Wilson") {
        capability "Initialize"
        attribute "connection", ""
        
    }
}

preferences {
    input("ip", "text", title: "IP Address", description: "IP Address", required: true)
	input("port", "text", title: "Port", description: "Port", required: true)
	//input("type", "text", title: "type", description: "type of device to install", required: false)
	//input("insteonId", "text", title: "Insteon ID", description: "Insteon device ID", required: false)	  
    input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
}


def parse(String description) {
    
	
	
	if (description.startsWith("Connected to Insteon Server")) {
        sendEvent(name: "connection", value: "connected")
		return
       }
	log.debug "data from websocketparsed here"
    
	def jsonSlurper = new JsonSlurper()
	def msg = jsonSlurper.parseText(description)
    
    if (msg.dimmable){
        createDevices(msg)
        return
    }
    
    if (msg.id != null){
        if(state.childDevice.contains(msg.id)){
	    log.debug child
    
	    child = getChildDevice(msg.id)
	    log.debug msg.state
    if (msg.deviceType == "contactsensor") {childContact(child, msg.state)}
    if (msg.deviceType == "dimmer") {childDimmer(child, msg.state)}
    if (msg.deviceType == "leaksensor") {childLeakSensor(child, msg.state)}

                                              } 
     }
}
                                                              
def childContact(child, state){
    log.debug "child conact = ${child}"
    log.debug "child state = ${state}"
    child.sendEvent(name: "contact", value: state)}

def childLeakSensor(child, state){
    log.debug "child leak = ${child}"
    log.debug "child state = ${state}"
    child.sendEvent(name: "water", value: state)}


def childDimmer(child, state){
    if (state == 0){
        child.sendEvent(name: "level", value: state)
        child.sendEvent(name: "switch", value: "off")
    }
   
    if (state > 0){
        log.debug state
        child.sendEvent(name: "level", value: state)
        child.sendEvent(name: "switch", value: "on")
    }
}
    

def initialize() {
   log.info "initialize() called"
   if (!ip) {
        log.warn "Please enter an IP"
        return
    }
    
	try {
		
       
		InterfaceUtils.webSocketConnect(device, "ws://${ip}:${port}")
    } 
    catch(e) {
        if (logEnable) log.debug "initialize error: ${e.message}"
        log.error "WebSocket connect failed"
    }
    
}

def updated() {
    log.info "updated() called"
    //Unschedule any existing schedules
    unschedule()
    
    //Create a 30 minute timer for debug logging
    if (logEnable) runIn(1800,logsOff)
    
    //Connect the webSocket
    runIn(2, listChild)
    runIn(4, getDevices)
        
}

def logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}


def getDevices() {
	log.debug "getDevices sent"
	sendMsg ("getDevices")
}

def createChild (id, type ) {
	namespace = "cw"
	if (type == "motion") {type = "Insteon Motion Child"}
	if (type == "contact") {type = "Insteon Contact Child"}
    if (type == "dimmer") {type = "Insteon Dimmer Child"}
    if (type == "leaksensor") {type = "Insteon Leak Child"}
	addChildDevice (namespace, type, id, [label: type + "|" + id, isComponent: false, name: type])
}


def createDevices(msg){ msg.each { it->
    namespace = "cw"
    if (it.deviceType == "motion") {type = "Insteon Motion Child"}
	if (it.deviceType == "contact") {type = "Insteon Contact Child"}
    if (it.deviceType == "dimmer") {type = "Insteon Dimmer Child"}
    if (it.deviceType == "leaksensor") {type = "Insteon Leak Child"}
    if(!state.childDevice.contains(it.deviceID)){
	addChildDevice (namespace, type, it.deviceID, [label: it.name, isComponent: false, name: type])
    }
    
    }
    listChild()
    
}
def listChild (){
    def myMap =[]
	log.debug "listChild called"
	childDevices.each{ it ->
            log.debug "child: ${it.deviceNetworkId}"
            myMap << it.deviceNetworkId
            
            
    }
    log.debug myMap
    state.childDevice = myMap
    
}

def sendMsg(String s) {
    InterfaceUtils.sendWebSocketMessage(device, s)
}



def webSocketStatus(String status){
    log.debug "webSocketStatus- ${status}"

    if(status.startsWith('failure: ')) {
        log.warn("failure message from web socket ${status}")
        reconnectWebSocket()
    } 
    else if(status == 'status: open') {
        log.info "websocket is open"
        // success! reset reconnect delay
        pauseExecution(1000)
        state.reconnectDelay = 1
    } 
    else if (status == "status: closing"){
        log.warn "WebSocket connection closing."
    } 
    else {
        log.warn "WebSocket error, reconnecting."
        reconnectWebSocket()
    }
}

def reconnectWebSocket() {
    // first delay is 2 seconds, doubles every time
    state.reconnectDelay = (state.reconnectDelay ?: 1) * 2
    // don't let delay get too crazy, max it out at 10 minutes
    if(state.reconnectDelay > 600) state.reconnectDelay = 600

   
    runIn(state.reconnectDelay, initialize)
}
