/**
 *  Insteon Dimmer Child
 *
 *  Copyright 2019 Chris Wilson
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  
 *
 * 
 */

import groovy.json.JsonSlurper

metadata {
    definition (name: "Insteon Dimmer Child", namespace: "cw", author: "cwwilson08") {
        capability "Switch Level"
        capability "Switch"
        
    }
}

def fon = [:]
    fon << ["true" : "True"]
    fon << ["false" : "False"]



preferences {

    input(name: "fastOn", type: "enum", title: "FastOn", options: fon, description: "Use FastOn/Off?", required: true)
     input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
} 
 

def parse(String description) {
	log.debug "Parent called child parse"
}

def on() {
    sendEvent(name: "switch", value: "on");
    sendEvent(name: "level", value: 100, unit: "%")
    
    if (fastOn == "false") {
    	parent.sendCmd("11", "FF", device.deviceNetworkId)
        if (logEnable)log.debug "Sending On command to parent for device ${device.deviceNetworkId}"
    } else {
        parent.sendCmd("12", "FF", device.deviceNetworkId)
        if (logEnable)log.debug "Sending Fast On command to parent for device ${device.deviceNetworkId}"
    }
}

def off() {
    sendEvent(name: "switch", value: "off");
    sendEvent(name: "level", value: 0, unit: "%")
    if (fastOn == "false") {
    	parent.sendCmd("13", "00", device.deviceNetworkId)
        if (logEnable)log.debug "Sending Off command to parent for device: ${device.deviceNetworkId}"
    } else {
        parent.sendCmd("14", "00", device.deviceNetworkId)
        if (logEnable)log.debug "Sending Fast Off command to parent for device: ${device.deviceNetworkId}"
    }
}
                
                                  
def setLevel(value) {
    if(value == 0){
        sendEvent(name: "switch", value: "off");
        sendEvent(name: "level", value: 0, unit: "%")
    } else {
        sendEvent(name: "switch", value: "on");
        sendEvent(name: "level", value: value, unit: "%")
    }
    parent.setLevel(value, device.deviceNetworkId)
    if (logEnable)log.debug "Sending setLevel command to parent for device: ${device.deviceNetworkId}  Level: ${value}}"
}


def setLevel(value, rate) {
    parent.setLevel(value, rate, device.deviceNetworkId)
    if (logEnable)log.debug "Sending setLevel command to parent for device: ${device.deviceNetworkId}  Level: ${value}"
}


def installed() {
	updated()
}

def updated() {
if (logEnable)log.info "updated() called"
unschedule()
if (logEnable) runIn(1800,logsOff)

}
       
def logsOff(){
log.warn "debug logging disabled..."
device.updateSetting("logEnable",[value:"false",type:"bool"])
}

